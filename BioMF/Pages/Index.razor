@page "/"
@inject NavigationManager NavigationManager
@inject Services.AppData  AppData
@using ParaMODA.Impl
@using System.Collections.Generic;
@using System.Text;

<div class="frontpagespace">
    <h2 style="color: #7f7f7f; font-family: Arial" ; align="center">Query Graph Type</h2>

    <div class="radioborders">
        <div class="custom-control custom-radio">
            <input type="radio" class="custom-control-input" id="none" name="queryGraphTypeRadios" checked @onchange="@FlipNoneRadio">
            <label class="custom-control-label" for="none">None</label>
        </div>

        <div class="custom-control custom-radio">
            <input type="radio" class="custom-control-input" id="oneQueryGraph" name="queryGraphTypeRadios" @onchange="EnableSelectQueryGraphButton">
            <label class="custom-control-label" for="oneQueryGraph">One Query Graph</label>
        </div>

        <div class="custom-control custom-radio">
            <input type="radio" class="custom-control-input" id="multipleQueryGraphs" name="queryGraphTypeRadios" @onchange="EnableSelectQueryGraphButton">
            <label class="custom-control-label" for="multipleQueryGraphs">Multiple Query Graphs</label>
        </div>
    </div>

    <div>
        <h2 style="color: #7f7f7f; font-family: Arial" ; align="center">Subgraph Size</h2>
        <div class="subgraphnum">
            @motifSizeSelected
        </div>
        <div class="subgraphslider">
            <div class="slidecontainer">
                @*onchange is added here so that data is able to be shared*@
                <input type="range" min="@minMotifSize" max="@maxMotifSize" class="slider" step="@stepSize" @bind="@motifSizeSelected" @onchange="updateMotif" @bind:event="oninput" />
            </div>

        </div>

    </div>
    <div class="filebuttons">
        <InputFile class="custom-file-input" id="selectFile" OnChange="@SelectFile" />
        @*Bug here IF there is an @onclick*@
        <label class="btn btn-primary" for="selectFile">Select File</label>

        @*Not in demo*@
        <InputFile class="custom-file-input" disabled="@selectQueryGraphButtonState" id="selectQueryGraph" OnChange="@SelectQueryGraphFile" />
        <label class="btn btn-primary" for="selectQueryGraph">Select Query Graph</label>

        @*WARNING: There is a bug that crashed the website IF the user does not select a network file before pressing start!*@
        <button class="btn btn-primary" @onclick="@GetInputGraph" style="float: right;">Start</button>

    </div>
</div>


@code {
    //TODO: Insert some method that when clicking start, the program runs and THEN redirects to the results page
    private int maxMotifSize = 5;
    private int minMotifSize = 3;
    private int stepSize = 1;
    private int motifSizeSelected = 3;
    private bool selectQueryGraphButtonState = true;
    private bool noneRadioChecked = true;
    //private IFileListEntry file;
    //int numLines;

    private void updateMotif()
    {
        AppData.SubgraphSize = motifSizeSelected;
    }

    private void SelectFile(IFileListEntry[] files)
    {
        AppData.NetworkFile = files.FirstOrDefault(); //assuming that there is either 1 or 0 files selected

    }
    //This has to be async
    async Task GetInputGraph()
    {
        using (var reader = new System.IO.StreamReader(AppData.NetworkFile.Data))
        {
            while (await reader.ReadLineAsync() != null)
            {
                var fileText = await reader.ReadToEndAsync(); //bug here, for some reason the reading skips the first line in the txt file
                AppData.Network = fileText.Split("\n", StringSplitOptions.None);
            }

        }
        ProcessGraph();
        navigateToResults();
    }


    private void SelectQueryGraphFile(IFileListEntry[] files)
    {
        //For the demo, do nothing

        //file = files.FirstOrDefault();
        //if (files.Length == 1)
        //{

        //}
        //else if (files.Length > 1)
        //{

        //}
    }
    private void FlipNoneRadio()
    {
        if (!noneRadioChecked)
        {
            selectQueryGraphButtonState = true;
            noneRadioChecked = true;
        }
        else
        {
            selectQueryGraphButtonState = true;
            noneRadioChecked = false;
        }
    }
    private void EnableSelectQueryGraphButton()
    {
        noneRadioChecked = false;
        selectQueryGraphButtonState = false;
    }

    private void navigateToLoading()
    {
        NavigationManager.NavigateTo("loadingresults");
    }

    private void navigateToResults()
    {
        NavigationManager.NavigateTo("results");
    }

    /// <summary>
    /// Processes network motifs based on the given size. Please note that the LoadGraph function in ParaMODA was modified to accomodate
    /// BlazorInputFile, and that the first line in the network file was not read.
    /// </summary>
    private void ProcessGraph()
    {
        AppData.InputGraph = GraphProcessor.LoadGraph(AppData.Network);
        ModaAlgorithms.BuildTree(AppData.SubgraphSize);
        ProcessAlgorithm();
    }

    private void ProcessAlgorithm()
    {
        AppData.FrequentSubgraphs = ModaAlgorithms.Algorithm1(AppData.InputGraph, null, AppData.SubgraphSize, 0); //null is query graph, 0 is the threshold (default)
        int totalMappings = 0;
        //sb.Append("\nCompleted. Result Summary\n");
        //sb.AppendLine("-------------------------------------------\n");

        foreach (var qGraph in AppData.FrequentSubgraphs)
        {
            if (qGraph.Value == null)
            {
                AppData.sb.AppendFormat("\tSubgraph: {0}\t Mappings: 0\t Is Frequent Subgraph? false \n", qGraph.Key.ToString());
                AppData.SubgraphResults.Add(AppData.sb.ToString());
                AppData.sb.Clear();
            }
            else
            {
                int count = qGraph.Value.Count; //int.Parse(qGraph.Value.Split('#')[0]); //
                AppData.sb.AppendFormat("\tSubgraph: {0}\t Mappings: {1}\t Is Frequent Subgraph? {2} \n", qGraph.Key.ToString(), count, qGraph.Key.IsFrequentSubgraph);
                AppData.SubgraphResults.Add(AppData.sb.ToString());
                AppData.sb.Clear();
                totalMappings += count;
            }
        }
        AppData.Mappings = totalMappings; //set total mappings to shared data
        AppData.sb.AppendFormat("Nodes - {0}; Edges: {1};", AppData.InputGraph.VertexCount, AppData.InputGraph.EdgeCount);
        //                sb.AppendFormat("\nTime Taken: {0} ({1}ms)\nNetwork: Nodes - {2}; Edges: {3};\nTotal Mappings found: {4}\nSubgraph Size: {5}\n", sw.Elapsed, sw.ElapsedMilliseconds.ToString("N"), inputGraph.VertexCount, inputGraph.EdgeCount, totalMappings, subGraphSize);
        AppData.FrequentSubgraphs.Clear();

    }
}