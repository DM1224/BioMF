@page "/loadingresults"
@inject NavigationManager NavigationManager
@inject Services.AppData AppData
@using ParaMODA.Impl

@*This page may not be used.*@

<h3>Loading.. Please Wait </h3>

@code {
    /// <summary>
    /// Processes network motifs based on the given size. Please note that the LoadGraph function in ParaMODA was modified to accomodate 
    /// BlazorInputFile, and that the first line in the network file was not read.
    /// </summary>
    private void ProcessGraph()
    {
        AppData.InputGraph = GraphProcessor.LoadGraph(AppData.Network);
        ModaAlgorithms.BuildTree(AppData.SubgraphSize);
        ProcessAlgorithm();
    }

    private void ProcessAlgorithm()
    {
        AppData.FrequentSubgraphs = ModaAlgorithms.Algorithm1(AppData.InputGraph, null, AppData.SubgraphSize, 0); //null is query graph, 0 is the threshold (default)
        int totalMappings = 0;
        //sb.Append("\nCompleted. Result Summary\n");
        //sb.AppendLine("-------------------------------------------\n");

        foreach (var qGraph in AppData.FrequentSubgraphs)
        {
            if (qGraph.Value == null)
            {
                AppData.sb.AppendFormat("\tSub-graph: {0}\t Mappings: 0\t Is Frequent Subgraph? false\n", qGraph.Key.ToString());
            }
            else
            {
                int count = qGraph.Value.Count; //int.Parse(qGraph.Value.Split('#')[0]); //
                AppData.sb.AppendFormat("\tSub-graph: {0}\t Mappings: {1}\t Is Frequent Subgraph? {2}\n", qGraph.Key.ToString(), count, qGraph.Key.IsFrequentSubgraph);
                totalMappings += count;
            }
        }
//                sb.AppendFormat("\nTime Taken: {0} ({1}ms)\nNetwork: Nodes - {2}; Edges: {3};\nTotal Mappings found: {4}\nSubgraph Size: {5}\n", sw.Elapsed, sw.ElapsedMilliseconds.ToString("N"), inputGraph.VertexCount, inputGraph.EdgeCount, totalMappings, subGraphSize);
//                AppData.FrequentSubgraphs.Clear();
        
    }
}
